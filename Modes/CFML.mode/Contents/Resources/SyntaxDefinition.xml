<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE syntax SYSTEM "syntax.dtd">
<syntax>
	<!-- STUDIO - Completely rewritten for Coda, do not replace with SEE version -->
    <head>
        <name>CFML</name> <!-- The definitions title -->
        <charsintokens><![CDATA[_0987654321abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-@"]]></charsintokens> 
        <charsincompletion><![CDATA[_0987654321abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-@</=!>]]></charsincompletion> 
    </head>

    <states>
    
        <default id="Base" color="#000" background-color="#fff" font-weight="normal" font-style="normal"  usesymbolsfrommode="CFML" useautocompletefrommode="CFML" usespellchecking="yes">
             
            <state id="Inline CFML Script" color="#000" background-color="#fff" useforautocomplete="no" usesymbolsfrommode="CFML" useautocompletefrommode="CFML">
				<begin><regex>&lt;(?=(?i)cfscript)</regex></begin>
				<end><regex>/(?i)cfscript&gt;</regex></end>
				
				<keywords id="CFML Script Tags" color="#b80f15" font-style="normal">
                    <regex>(\A&lt;\Z)</regex>
                    <regex>(&lt;/(?i)cfscript[^&gt;]*&gt;)</regex>
                </keywords>

                <state id="Opening CFML Script Tag" color="#b80f15" font-style="normal">
                    <begin><regex>\A(?i)cfscript</regex></begin>
                    <end><regex>&gt;</regex></end>
        
                    <import mode="XML" state="Tags" />
                </state>
				
				<state id="Single Line Comment" type="comment" color="#236E25" font-style="italic">
					<begin><regex>//</regex></begin>
                    <end><regex>[\n\r]</regex></end>
				</state>
				
				<state id="Multi Line Comment" type="comment" color="#236E25" font-style="italic">
					<begin><regex>/\*</regex></begin>
					<end><regex>\*/</regex></end>
				</state>
				
				<import state="CFML Code" />
										
			</state>

                 
             <state id="Inline CSS" color="#000" font-style="normal" usesymbolsfrommode="CSS" useautocompletefrommode="CSS">
                <begin><regex>&lt;(?=(?i)style)</regex></begin>
                <end><regex>/(?i)style&gt;</regex></end>
     
                <import mode="CSS"/>

                <keywords id="Style Tags"  color="#881280" font-style="normal">
                    <regex>(\A&lt;\Z)</regex>
                    <regex>(&lt;/(?i)style[^&gt;]*&gt;)</regex>
                </keywords>

                <state id="Opening Style Tag" color="#881280" font-style="normal" usesymbolsfrommode="CFML" useautocompletefrommode="CFML">
                    <begin><regex>\A(?i)style</regex></begin>
                    <end><regex>&gt;</regex></end>
        
                    <import mode="XML" state="Tags" />
                </state>
                
            </state>

            <state id="Inline Javascript" color="#000" usesymbolsfrommode="Javascript" useautocompletefrommode="Javascript">
                <begin><regex>&lt;(?=(?i)script.*?javascript.*&gt;)</regex></begin>
                <end><regex>/(?i)script&gt;</regex></end>
    
                <import mode="Javascript" />

                <keywords id="Script Tags"  color="#881280" font-style="normal">
                    <regex>(\A&lt;\Z)</regex>
                    <regex>(&lt;/(?i)script[^&gt;]*&gt;)</regex>
                </keywords>

                <state id="Opening Script Tag" color="#881280" font-style="normal" usesymbolsfrommode="CFML" useautocompletefrommode="CFML">
                    <begin><regex>\A(?i)script</regex></begin>
                    <end><regex>&gt;</regex></end>
        
                    <import mode="XML" state="Tags" />
                </state>
                
            </state>

			<state id="CFML Comment" color="#727272" background-color="none" font-weight="normal" font-style="italic">
				<begin><regex>&lt;!---</regex></begin>
				<end><regex>[^&gt;]*---&gt;</regex></end>			
			</state>
			
			<import mode="XML" keywords-only="yes"/>
			<state-link state="Comment" mode="XML" />
			<state-link state="CDATA" mode="XML" />
			<state-link state="Doctype" mode="XML" />
			<state-link state="Escape" mode="XML" />
			        							
			<state id="CFML Query" color="#000" background-color="#fff" font-style="normal" usesymbolsfrommode="SQL" useautocompletefrommode="SQL">
				<begin><regex>&lt;(?=(?i)cfquery\s.*&gt;)</regex></begin>
				<end><regex>/(?i)cfquery&gt;</regex></end>
				
				<keywords id="Query Tags" color="#991418" font-style="normal">
                    <regex>(\A&lt;\Z)</regex>
                    <regex>(&lt;/(?i)cfquery[^&gt;]*&gt;)</regex>
                </keywords>

                <state id="Opening Query Tag" color="#991418" font-style="normal" usesymbolsfrommode="CFML" useautocompletefrommode="CFML">
                    <begin><regex>\A(?i)cfquery</regex></begin>
                    <end><regex>&gt;</regex></end>
        			
        			<import state="CFML Tags" />
                </state>
				
				<state id="Query Parameter" color="#991418" font-style="normal" usesymbolsfrommode="CFML" useautocompletefrommode="CFML">
                    <begin><regex>&lt;(?=(?i)cfqueryparam)</regex></begin>
                    <end><regex>&gt;</regex></end>
						
						<import state="CFML Tags" />
                </state>
				
				
				<import mode="SQL" keywords-only="yes"/>
				<import state="CFML Code" />
				<state-link state="CFML Comment" />
				<state-link state="Comment" mode="XML" />
				<state-link state="CDATA" mode="XML" />
				<state-link state="Doctype" mode="XML" />
				<state-link state="Escape" mode="XML" />
								
			</state>
			
			<state id="CFML Tags" color="#991418" font-style="normal">
				<begin><regex>&lt;(?=(?i)/?cf)</regex></begin>
				<end><regex>&gt;</regex></end>
				
				<import state="CFML Code" />
				
				<keywords id="CFML Attributes in Tags" color="#994500" useforautocomplete="no">
					<regex>([\w-]*)(?=[ \t]*=)</regex>
				</keywords>
				
			</state>

			
			<state id="HTML Tags" color="#881280" font-style="normal" usesymbolsfrommode="CFML" useautocompletefrommode="CFML">
				<begin><regex>&lt;</regex></begin>
				<end><regex>&gt;</regex></end>
		
				<state id="Strings in HTML Tags" type="string" color="#1A1AA6" useforautocomplete="no">
					<begin><regex>"</regex></begin>
					<end><regex>"</regex></end>
					
						<keywords id="Output Variables in HTML Strings" color="#2C66FF" useforautocomplete="no">
							<regex>(#[^&lt;&gt;#]+#)</regex>
						</keywords>
				</state>
				
				<state id="Strings in HTML Tags 2" type="string" color="#1A1AA6" useforautocomplete="no">
					<begin><regex>'</regex></begin>
					<end><regex>'</regex></end>
						
					<import state="Strings in HTML Tags" />
				</state>
				
				<state id="CFML Tags in HTML Tags" color="#991418" font-style="normal">
					<begin><regex>&lt;(?=(?i)/?cf)</regex></begin>
					<end><regex>&gt;</regex></end>
					
					<import state="CFML Tags" />
					
				</state>
				
				<keywords id="Output Variables in HTML Tags" color="#825900" useforautocomplete="no">
					<regex>(#[^&lt;&gt;#]+#)</regex>
				</keywords>
				
				<keywords id="Attributes in HTML Tags" color="#994500" useforautocomplete="no">
					<regex>([\w-]*)(?=[ \t]*=)</regex>
				</keywords>
			</state>
			
									 
			<state id="CFML Code" color="#000" background-color="#fff" useforautocomplete="no" containerState="yes" usesymbolsfrommode="CFML" useautocompletefrommode="CFML">
				
				<keywords id="Generic Functions" color="#661AA9" useforautocomplete="no">
					<!--<regex>([\w]+[\(]{1}[\w\s\.\[\]\)\(\"/;,|#&amp;]+[\)]{1})(?=[^&lt;]*&gt;)</regex>-->
					<regex>([A-Za-z0-9_]+ *)\(</regex>
				</keywords>
				
				<state id="CFML Strings" type="string" color="#EB7300" useforautocomplete="no">
					<begin><regex>"</regex></begin>
					<end><regex>"</regex></end>
					
					<keywords id="Output Variables in Strings" color="#825900" useforautocomplete="no">
						<regex>(#[^&lt;&gt;#]+#)</regex>
					</keywords>
					
				</state>
				
				<state id="CFML Strings 2" type="string" color="#EB7300" useforautocomplete="no">
					<begin><regex>'</regex></begin>
					<end><regex>'</regex></end>
					
					<import state="CFML Strings" />
				</state>
				
				<keywords id="Output Variables in CFML Code" color="#825900" useforautocomplete="no">
					<regex>(#[^&lt;&gt;#]+#)</regex>
				</keywords>
				
				<keywords id="Scope and Tag Variables" color="#673820" useforautocomplete="no">
					<regex>((?i)(session\.|application\.|request\.|request\.session\.|client\.|server\.|server\.coldfusion\.|form\.|cfcatch\.|cfdirectory\.|cferror\.|cffile\.|cfftp\.|cfhtp\.|cfindex\.|cfldap\.|cfpop\.|cfquery\.|cfregistry\.|cfsearch\.|cfstoredproc\.|cgi\.|url\.|cookie\.|arguments\.|cfevent\.)([\w\d])+(\[([\w\d"'])+\])?)</regex>
				</keywords>

	
				<keywords id="Numbers" color="#00f" useforautocomplete="no">
					<regex>(?&lt;=[^\w\d]|^)(((([0-9]+\.[0-9]*)|(\.[0-9]+))([eE][+\-]?[0-9]+)?[fFlL]?)|((([1-9][0-9]*)|0[0-7]*|(0[xX][0-9a-fA-F]+))(([uU][lL]?)|([lL][uU]?))?))(?=[^\w\d]|$)</regex>
				</keywords>
				
				<keywords id="Keywords" color="#881350" font-style="normal" casesensitive="no" useforautocomplete="yes">
					<string>and</string>
					<string>or</string>
					<string>mod</string>
					<string>is</string>
					<string>equal</string>
					<string>eq</string>
					<string>lt</string>
					<string>less than</string>
					<string>lte</string>
					<string>le</string>
					<string>less than or equal to</string>
					<string>gt</string>
					<string>greater than</string>
					<string>gte</string>
					<string>greater than or equal to</string>
					<string>is not</string>
					<string>neq</string>
					<string>not equal</string>
					<string>contains</string>
					<string>does not contain</string>
					<string>not</string>
					<string>true</string>
					<string>false</string>
					<string>&amp;</string>
					<string>break</string>
					<string>case</string>
					<string>catch</string>
					<string>continue</string>
					<string>do</string>
					<string>else</string>
					<string>for</string>
					<string>if</string>
					<string>in</string>
					<string>return</string>
					<string>try</string>
					<string>var</string>
					<string>while</string>
				</keywords>
				
				<keywords id="Functions" color="#661AA9" font-style="normal" casesensitive="no" useforautocomplete="yes">
					<string>Abs</string>
					<string>ACos</string>
					<string>AddSOAPRequestHeader</string>
					<string>AddSOAPResponseHeader</string>
					<string>ArrayAppend</string>
					<string>ArrayAvg</string>
					<string>ArrayClear</string>
					<string>ArrayDeleteAt</string>
					<string>ArrayInsertAt</string>
					<string>ArrayIsEmpty</string>
					<string>ArrayLen</string>
					<string>ArrayMax</string>
					<string>ArrayMin</string>
					<string>ArrayNew</string>
					<string>ArrayPrepend</string>
					<string>ArrayResize</string>
					<string>ArraySet</string>
					<string>ArraySort</string>
					<string>ArraySum</string>
					<string>ArraySwap</string>
					<string>ArrayToList</string>
					<string>Asc</string>
					<string>ASin</string>
					<string>Atn</string>
					<string>BinaryDecode</string>
					<string>BinaryEncode</string>
					<string>BitAnd</string>
					<string>BitMaskClear</string>
					<string>BitMaskRead</string>
					<string>BitMaskSet</string>
					<string>BitNot</string>
					<string>BitOr</string>
					<string>BitSHLN</string>
					<string>BitSHRN</string>
					<string>BitXor</string>
					<string>Ceiling</string>
					<string>CharsetDecode</string>
					<string>CharsetEncode</string>
					<string>Chr</string>
					<string>CJustify</string>
					<string>Compare</string>
					<string>CompareNoCase</string>
					<string>Cos</string>
					<string>CreateDate</string>
					<string>CreateDateTime</string>
					<string>CreateObject</string>
					<string>CreateODBCDate</string>
					<string>CreateODBCDateTime</string>
					<string>CreateODBCTime</string>
					<string>CreateTime</string>
					<string>CreateTimeSpan</string>
					<string>CreateUUID</string>
					<string>DateAdd</string>
					<string>DateCompare</string>
					<string>DateConvert</string>
					<string>DateDiff</string>
					<string>DateFormat</string>
					<string>DatePart</string>
					<string>Day</string>
					<string>DayOfWeek</string>
					<string>DayOfWeekAsString</string>
					<string>DayOfYear</string>
					<string>DaysInMonth</string>
					<string>DaysInYear</string>
					<string>DE</string>
					<string>DecimalFormat</string>
					<string>DecrementValue</string>
					<string>Decrypt</string>
					<string>DecryptBinary</string>
					<string>DeleteClientVariable</string>
					<string>DirectoryExists</string>
					<string>DollarFormat</string>
					<string>Duplicate</string>
					<string>Encrypt</string>
					<string>EncryptBinary</string>
					<string>Evaluate</string>
					<string>Exp</string>
					<string>ExpandPath</string>
					<string>FileExists</string>
					<string>Find</string>
					<string>FindNoCase</string>
					<string>FindOneOf</string>
					<string>FirstDayOfMonth</string>
					<string>Fix</string>
					<string>FormatBaseN</string>
					<string>GetAuthUser</string>
					<string>GetBaseTagData</string>
					<string>GetBaseTagList</string>
					<string>GetBaseTemplatePath</string>
					<string>GetClientVariablesList</string>
					<string>GetCurrentTemplatePath</string>
					<string>GetDirectoryFromPath</string>
					<string>GetEncoding</string>
					<string>GetException</string>
					<string>GetFileFromPath</string>
					<string>GetFunctionList</string>
					<string>GetGatewayHelper</string>
					<string>GetHttpRequestData</string>
					<string>GetHttpTimeString</string>
					<string>GetLocale</string>
					<string>GetLocaleDisplayName</string>
					<string>GetLocalHostIP</string>
					<string>GetMetaData</string>
					<string>GetMetricData</string>
					<string>GetPageContext</string>
					<string>GetProfileSections</string>
					<string>GetProfileString</string>
					<string>GetSOAPRequest</string>
					<string>GetSOAPRequestHeader</string>
					<string>GetSOAPResponse</string>
					<string>GetSOAPResponseHeader</string>
					<string>GetTempDirectory</string>
					<string>GetTempFile</string>
					<string>GetTickCount</string>
					<string>GetTimeZoneInfo</string>
					<string>GetToken</string>
					<string>Hash</string>
					<string>Hour</string>
					<string>HTMLCodeFormat</string>
					<string>HTMLEditFormat</string>
					<string>IIf</string>
					<string>IncrementValue</string>
					<string>InputBaseN</string>
					<string>Insert</string>
					<string>Int</string>
					<string>IsArray</string>
					<string>IsBinary</string>
					<string>IsBoolean</string>
					<string>IsCustomFunction</string>
					<string>IsDate</string>
					<string>IsDebugMode</string>
					<string>IsDefined</string>
					<string>IsLeapYear</string>
					<string>IsLocalHost</string>
					<string>IsNumeric</string>
					<string>IsNumericDate</string>
					<string>IsObject</string>
					<string>IsQuery</string>
					<string>IsSimpleValue</string>
					<string>IsSOAPRequest</string>
					<string>IsStruct</string>
					<string>IsUserInRole</string>
					<string>IsValid</string>
					<string>IsWDDX</string>
					<string>IsXML</string>
					<string>IsXmlAttribute</string>
					<string>IsXmlDoc</string>
					<string>IsXmlElem</string>
					<string>IsXmlNode</string>
					<string>IsXmlRoot</string>
					<string>JavaCast</string>
					<string>JSStringFormat</string>
					<string>LCase</string>
					<string>Left</string>
					<string>Len</string>
					<string>ListAppend</string>
					<string>ListChangeDelims</string>
					<string>ListContains</string>
					<string>ListContainsNoCase</string>
					<string>ListDeleteAt</string>
					<string>ListFind</string>
					<string>ListFindNoCase</string>
					<string>ListFirst</string>
					<string>ListGetAt</string>
					<string>ListInsertAt</string>
					<string>ListLast</string>
					<string>ListLen</string>
					<string>ListPrepend</string>
					<string>ListQualify</string>
					<string>ListRest</string>
					<string>ListSetAt</string>
					<string>ListSort</string>
					<string>ListToArray</string>
					<string>ListValueCount</string>
					<string>ListValueCountNoCase</string>
					<string>LJustify</string>
					<string>Log</string>
					<string>Log10</string>
					<string>LSCurrencyFormat</string>
					<string>LSDateFormat</string>
					<string>LSEuroCurrencyFormat</string>
					<string>LSIsCurrency</string>
					<string>LSIsDate</string>
					<string>LSIsNumeric</string>
					<string>LSNumberFormat</string>
					<string>LSParseCurrency</string>
					<string>LSParseDateTime</string>
					<string>LSParseEuroCurrency</string>
					<string>LSParseNumber</string>
					<string>LSTimeFormat</string>
					<string>LTrim</string>
					<string>Max</string>
					<string>Mid</string>
					<string>Min</string>
					<string>Minute</string>
					<string>Month</string>
					<string>MonthAsString</string>
					<string>Now</string>
					<string>NumberFormat</string>
					<string>ParagraphFormat</string>
					<string>ParseDateTime</string>
					<string>Pi</string>
					<string>PreserveSingleQuotes</string>
					<string>Quarter</string>
					<string>QueryAddColumn</string>
					<string>QueryAddRow</string>
					<string>QueryNew</string>
					<string>QuerySetCell</string>
					<string>QuotedValueList</string>
					<string>Rand</string>
					<string>Randomize</string>
					<string>RandRange</string>
					<string>REFind</string>
					<string>REFindNoCase</string>
					<string>ReleaseComObject</string>
					<string>RemoveChars</string>
					<string>RepeatString</string>
					<string>Replace</string>
					<string>ReplaceList</string>
					<string>ReplaceNoCase</string>
					<string>REReplace</string>
					<string>REReplaceNoCase</string>
					<string>Reverse</string>
					<string>Right</string>
					<string>RJustify</string>
					<string>Round</string>
					<string>RTrim</string>
					<string>Second</string>
					<string>SendGatewayMessage</string>
					<string>SetEncoding</string>
					<string>SetLocale</string>
					<string>SetProfileString</string>
					<string>SetVariable</string>
					<string>Sgn</string>
					<string>Sin</string>
					<string>SpanExcluding</string>
					<string>SpanIncluding</string>
					<string>Sqr</string>
					<string>StripCR</string>
					<string>StructAppend</string>
					<string>StructClear</string>
					<string>StructCopy</string>
					<string>StructCount</string>
					<string>StructDelete</string>
					<string>StructFind</string>
					<string>StructFindKey</string>
					<string>StructFindValue</string>
					<string>StructGet</string>
					<string>StructInsert</string>
					<string>StructIsEmpty</string>
					<string>StructKeyArray</string>
					<string>StructKeyExists</string>
					<string>StructKeyList</string>
					<string>StructNew</string>
					<string>StructSort</string>
					<string>StructUpdate</string>
					<string>Tan</string>
					<string>TimeFormat</string>
					<string>ToBase64</string>
					<string>ToBinary</string>
					<string>ToScript</string>
					<string>ToString</string>
					<string>Trim</string>
					<string>UCase</string>
					<string>URLDecode</string>
					<string>URLEncodedFormat</string>
					<string>URLSessionFormat</string>
					<string>Val</string>
					<string>ValueList</string>
					<string>Week</string>
					<string>Wrap</string>
					<string>WriteOutput</string>
					<string>XmlChildPos</string>
					<string>XmlElemNew</string>
					<string>XmlFormat</string>
					<string>XmlGetNodeType</string>
					<string>XmlNew</string>
					<string>XmlParse</string>
					<string>XmlSearch</string>
					<string>XmlTransform</string>
					<string>XmlValidate</string>
					<string>Year</string>
					<string>YesNoFormat</string>
				</keywords>

			</state>
			
			<keywords id="Output Variables" color="#825900" useforautocomplete="no">
				<regex>(#[^&lt;&gt;#]+#)</regex>
			</keywords>
                        
        </default>

    </states>

</syntax>