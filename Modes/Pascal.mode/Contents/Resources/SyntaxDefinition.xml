<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE syntax SYSTEM "syntax.dtd">
<syntax>

    <head>
        <name>C</name> <!-- The definitions title -->
        <charsintokens><![CDATA[_0987654321abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ@]]></charsintokens> <!-- Valid Characters for Variables -->
        <!-- <charsdelimitingtokens></charsdelimitingtokens> -->
    </head>

    <states>
    
        <default id="Base" color="#000" background-color="#fff" font-weight="normal" font-style="normal">
            <keywords id="Keywords" color="#881350" casesensitive="no" useforautocomplete="yes">
                <string>and</string>
                <string>array</string>
                <string>asm</string>
                <string>begin</string>
                <string>case</string>
                <string>const</string>
                <string>div</string>
                <string>do</string>
                <string>downto</string>
                <string>else</string>
                <string>end</string>
                <string>for</string>
                <string>function</string>
                <string>goto</string>
                <string>if</string>
                <string>implementation</string>
                <string>in</string>
                <string>interface</string>
                <string>label</string>
                <string>mod</string>
                <string>nil</string>
                <string>not</string>
                <string>of</string>
                <string>on</string>
                <string>operator</string>
                <string>or</string>
                <string>packed</string>
                <string>procedure</string>
                <string>program</string>
                <string>record</string>
                <string>repeat</string>
                <string>self</string>
                <string>set</string>
                <string>shl</string>
                <string>shr</string>
                <string>then</string>
                <string>to</string>
                <string>type</string>
                <string>unit</string>
                <string>until</string>
                <string>uses</string>
                <string>var</string>
                <string>while</string>
                <string>with</string>
                <string>xor</string>
                <string>break</string>
                <string>continue</string>
                <string>constructor</string>
                <string>destructor</string>
                <string>inherited</string>
                <string>inline</string>
                <string>object</string>
                <string>private</string>
                <string>protected</string>
                <string>public</string>
                <string>as</string>
                <string>at</string>
                <string>automated</string>
                <string>class</string>
                <string>dispinterface</string>
                <string>except</string>
                <string>exports</string>
                <string>finalization</string>
                <string>finally</string>
                <string>initialization</string>
                <string>is</string>
                <string>library</string>
                <string>on</string>
                <string>property</string>
                <string>published</string>
                <string>raise</string>
                <string>resourcestring</string>
                <string>threadvar</string>
                <string>try</string>
                <string>dispose</string>
                <string>exit</string>
                <string>false</string>
                <string>new</string>
                <string>true</string>
            </keywords>
            <keywords id="Types" color="#408" casesensitive="no" useforautocomplete="yes">
                <string>Integer</string>
                <string>Cardinal</string>
                <string>ShortInt</string>
                <string>SmallInt</string>
                <string>LongInt</string>
                <string>Int64</string>
                <string>Byte</string>
                <string>Word</string>
                <string>LongWord</string>
                <string>Char</string>
                <string>AnsiChar</string>
                <string>WideChar</string>
                <string>Boolean</string>
                <string>ByteBool</string>
                <string>WordBool</string>
                <string>LongBool</string>
                <string>Single</string>
                <string>Double</string>
                <string>Extended</string>
                <string>Comp</string>
                <string>Currency</string>
                <string>Real</string>
                <string>Real48</string>
                <string>String</string>
                <string>ShortString</string>
                <string>AnsiString</string>
                <string>WideString</string>
                <string>Pointer</string>
                <string>Variant</string>
                <string>File</string>
                <string>Text</string>
            </keywords>
            <keywords id="Numbers" color="#00f" useforautocomplete="no">
				<regex>(?&lt;=[^\w\d]|^)(((([0-9]+\.[0-9]*)|(\.[0-9]+))([eE][+\-]?[0-9]+)?[fFlL]?)|((([1-9][0-9]*)|0[0-7]*|(0[xX][0-9a-fA-F]+))(([uU][lL]?)|([lL][uU]?))?))(?=[^\w\d]|$)</regex>
            </keywords>
            <keywords id="Characters" color="#00f" useforautocomplete="no">
				<regex>('.')</regex>
            </keywords>
            <keywords id="FunctionRegex" color="#003369" useforautocomplete="no">
				<regex>([A-Za-z0-9_]+ *)\(</regex>
            </keywords>
            <keywords id="Preprocessor" color="#683821" useforautocomplete="no">
				<regex>(^[ 	]*#([^\n\r])*)</regex>
            </keywords>

        
            <state id="Comment" color="#236E25" background-color="none" font-weight="normal" font-style="italic">
                <begin><regex>\(\*</regex></begin>
                <end><regex>\*\)</regex></end>
            </state>
            
            <state id="Comment Curly" color="#236E25" background-color="none" font-weight="normal" font-style="italic">
                <begin><regex>\{</regex></begin>
                <end><regex>\}</regex></end>
            </state>
            
            <state id="SingleComment" color="#236E25" background-color="none" font-weight="normal" font-style="italic">
                <begin><regex>//</regex></begin>
                <end><regex>[\n\r]</regex></end>
            </state>
            
            <state id="String" color="#760f15" background-color="none" font-weight="normal" font-style="normal">
                <begin><regex>'</regex></begin>
                <end><regex>(((?&lt;!\\)(\\\\)*)|^)'</regex></end>
            </state>
        </default>
    </states>

</syntax>
