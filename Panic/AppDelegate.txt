- (void)addMe
{
	// Override SubEthaEdit's addMe to check for AddressBook preference

    NSUserDefaults	*defaults = [NSUserDefaults standardUserDefaults];
	ABPerson		*meCard = [[ABAddressBook sharedAddressBook] me];

	// add self as user 
	TCMMMUser *me=[TCMMMUser new];
	NSString *myName =nil;
	NSString *myAIM  =nil;
	NSString *myEmail=nil;
	NSImage *myImage =nil;
	NSImage *scaledMyImage;
    
    NSString *userID = [[NSUserDefaults standardUserDefaults] stringForKey:@"UserID"];
    
	if ( !userID ) 
	{
        // first run
        userID = [NSString UUIDString];
        
        CFStringRef appID = (CFStringRef)[[NSBundle mainBundle] objectForInfoDictionaryKey:@"CFBundleIdentifier"];
        // Set up the preference.
        CFPreferencesSetValue(CFSTR("UserID"), (CFStringRef)userID, appID, kCFPreferencesCurrentUser, kCFPreferencesCurrentHost);
        // Write out the preference data.
        CFPreferencesSynchronize(appID, kCFPreferencesCurrentUser, kCFPreferencesCurrentHost);
    }
    
    if ( [defaults stringForKey:MyColorHuePreferenceKey] == nil ) 
	{           
        // select random color
        // set basic user data 
        if ( meCard )
		{
            NSString *firstName = [meCard valueForProperty:kABFirstNameProperty];
            NSString *lastName  = [meCard valueForProperty:kABLastNameProperty];            
    
            if ((firstName!=nil) && (lastName!=nil)) 
                myName = [NSString stringWithFormat:@"%@ %@",firstName,lastName];
            else if (firstName!=nil)
                myName=firstName;
            else if (lastName!=nil)
				myName=lastName;
            else
                myName=NSFullUserName();
            
            
            ABMultiValue	*emails = [meCard valueForProperty:kABEmailProperty];
			NSString		*identifier = [emails primaryIdentifier];			
			if (identifier) 
			{
				int index = [emails indexForIdentifier:identifier];
				if (index != NSNotFound)
					myEmail = [emails valueAtIndex:index];
			}
            
			ABMultiValue	*aims=[meCard valueForProperty:kABAIMInstantProperty];
            identifier = [aims primaryIdentifier];			
			if (identifier) 
			{
				int index = [aims indexForIdentifier:identifier];
				if (index != NSNotFound)
					myAIM = [aims valueAtIndex:index];
			}
			
			NSData  *imageData;
			if ((imageData = [meCard imageData])) 
			{
				myImage=[[NSImage alloc] initWithData:imageData];
				[myImage setCacheMode:NSImageCacheNever];
			} 
        } 
		else
		{
            myName=NSFullUserName();
            myEmail=@"";
            myAIM=@"";
        }
        
		if (!myEmail) myEmail = @"";
        if (!myAIM) myAIM = @"";
        
		[defaults setObject:myEmail forKey:MyEmailPreferenceKey];
        [defaults setObject:myAIM forKey:MyAIMPreferenceKey];
		[defaults setObject:myName forKey:MyNamePreferenceKey];
		
        sranddev();
      
		int selectedNumber = rand();
		float selectedFloat = (float)((selectedNumber % 100) + 1);
	  
        [defaults setObject:[NSNumber numberWithFloat:selectedFloat] forKey:MyColorHuePreferenceKey];
    } 
	else
	{
        // not first run so fill in the stuff
		
		if ( ![defaults boolForKey:TSPrefKeyUseAddressBook] || (meCard == nil) )
		{
			myAIM = [defaults stringForKey:MyAIMPreferenceKey];
			myEmail = [defaults stringForKey:MyEmailPreferenceKey];
			myName = [defaults stringForKey:MyNamePreferenceKey];
			
			NSString *path = [LOCAL(@"ApplicationSupport") stringByExpandingTildeInPath];
			path = [path stringByAppendingPathComponent:[NSString stringWithFormat:@"%@.png", userID]];
			
			myImage = [[NSImage alloc] initByReferencingFile:path];
			[myImage setCacheMode:NSImageCacheNever];
		}
		else
		{
			// pull info from address book & update prefs
			NSString *firstName = [meCard valueForProperty:kABFirstNameProperty];
            NSString *lastName  = [meCard valueForProperty:kABLastNameProperty];            
    
            if ((firstName!=nil) && (lastName!=nil))
			{
                myName = [NSString stringWithFormat:@"%@ %@",firstName,lastName];
            }
			else if (firstName!=nil) 
				myName = firstName;
			else if (lastName!=nil)
                myName = lastName;
            else 
                myName = NSFullUserName();
            
			[defaults setObject:myName forKey:MyNamePreferenceKey];
			
			ABMultiValue	*emails = [meCard valueForProperty:kABEmailProperty];
            NSString		*identifier = [emails primaryIdentifier];			
			if (identifier) 
			{
				int index = [emails indexForIdentifier:identifier];
				if (index != NSNotFound)
				{
					myEmail=[emails valueAtIndex:index];
					[defaults setObject:myEmail forKey:MyEmailPreferenceKey];
				}
			}
			
			ABMultiValue	*aims = [meCard valueForProperty:kABAIMInstantProperty];
            identifier = [aims primaryIdentifier];			
			if (identifier) 
			{
				int index = [aims indexForIdentifier:identifier];
				if (index != NSNotFound)
				{
					myAIM = [aims valueAtIndex:index];
					[defaults setObject:myAIM forKey:MyAIMPreferenceKey];
				}
			}
			
			NSData  *imageData;
			if ((imageData = [meCard imageData])) 
			{
				myImage = [[NSImage alloc] initWithData:imageData];
				[myImage setCacheMode:NSImageCacheNever];
			} 
		}
    }

    if (!myImage) 
	{
        myImage = [[NSImage imageNamed:@"genericPerson"] retain];
    }
    
    if (!myEmail) myEmail = @"";
    if (!myAIM) myAIM = @"";
    
    // resizing the image
    scaledMyImage = [myImage resizedImageWithSize:NSMakeSize(64.,64.)];
    NSData *pngData = [scaledMyImage TIFFRepresentation];
    pngData = [[NSBitmapImageRep imageRepWithData:pngData] representationUsingType:NSPNGFileType properties:[NSDictionary dictionary]];
    // do this because my resized Images don't behave right on setFlipped:, initWithData ones do!
    scaledMyImage = [[[NSImage alloc] initWithData:pngData] autorelease];
    [me setUserID:userID];

    [me setName:myName];
    [[me properties] setObject:myEmail forKey:@"Email"];
    [[me properties] setObject:myAIM forKey:@"AIM"];
    [[me properties] setObject:scaledMyImage forKey:@"Image"];
    [[me properties] setObject:pngData forKey:@"ImageAsPNG"];
    [me setUserHue:[defaults objectForKey:MyColorHuePreferenceKey]];

    [myImage release];
    [me prepareImages];
	
    TCMMMUserManager *userManager = [TCMMMUserManager sharedInstance];
    [userManager setMe:[me autorelease]];
}